eureka.security.user.name=admin
eureka.security.user.password=123456
#注册中心地址 Eureka Server交互的地址
eureka.client.serviceUrl.defaultZone=http://${eureka.security.user.name}:${eureka.security.user.password}@10.37.147.172:8091/eureka/
spring.cloud.config.discovery.serviceId=eureka-config
spring.cloud.config.discovery.enabled=true
spring.cloud.config.name=db
spring.cloud.config.profile=sit
spring.cloud.config.label=master
spring.cloud.config.fail-fast=true
# 每间隔10s，向服务端发送一次心跳，证明自己依“存活”
eureka.instance.lease-renewal-interval-in-seconds=30
# 告诉服务端，如果我15s之内没有给你发心跳，就代表我“死”了，将我踢出掉。
eureka.instance.lease-expiration-duration-in-seconds= 50

#feign 开启熔断必须添加
feign.hystrix.enabled=true
hystrix.command.default.execution.timeout.enabled=true
#断路器的超时时间,下级服务返回超出熔断器时间，即便成功，消费端消息也是TIMEOUT,所以一般断路器的超时时间需要大于ribbon的超时时间。
#服务的返回时间大于ribbon的超时时间，会触发重试
##默认=1000，太小
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=60000
#断路器详细设置
#当在配置时间窗口内达到此数量的失败后，进行短路。默认20个）
hystrix.command.default.circuitBreaker.requestVolumeThreshold=20
#短路多久以后开始尝试是否恢复，默认5s）
hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds=5
#出错百分比阈值，当达到此阈值后，开始短路。默认50%）
hystrix.command.default.circuitBreaker.errorThresholdPercentage=50%
#ribbon请求连接的超时时间- 限制3秒内必须请求到服务，并不限制服务处理的返回时间
ribbon.ConnectTimeout=10000
#请求处理的超时时间 下级服务响应最大时间,超出时间消费方（路由也是消费方）返回timeout
ribbon.ReadTimeout=20000

#消息总线配置
#spring.cloud.bus.enabled=true
#spring.cloud.bus.trace.enabled=true
